/*******************************************************************
 *                                                                 *
 * Copyright IBM Corp. 2022                                        *
 *                                                                 *
 *******************************************************************/

plugins {
    id 'java'
    id 'idea'
    id 'eclipse'

    id 'com.github.johnrengelman.shadow' version '7.1.2'

    id 'jacoco'
}

ext {
    junit_jupiter_version = '5.9.2'
    junit_platform_launcher_version = '1.9.2'

    mockito_version = '4.11.0'
    jdefault_version = '2.0.0'
    hamcrest_version = '2.2'

    jackson_version = '2.14.2'
    jackson_dataformat_version = '2.14.2'

    log4j2_version = '2.20.0'

    commons_codec_version = '1.13'
    commons_csv_version = '1.8'
    commons_io_version = '2.11.0'
    commons_lang_version = '3.10'
    commons_math_version = '3.6.1'
    commons_text_version = '1.8'
    commons_validator_version = '1.7'
    pdfbox_version = '2.0.24'

    poi_version = "5.2.2"

    dpt_version = "6.0.0"

    commons_cli_version = '1.5.0'
    commons_io_version = '2.7'
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    minHeapSize = "5g"
    maxHeapSize = "10g"

    testLogging {
        events 'failed'
        exceptionFormat 'short'

        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams false
    }
}

group = 'com.ibm.research.drl.dpt'
version = '6.0.0'

jar {
    manifest {
        attributes 'Main-Class': "${group}.toolkit.Toolkit"
    }
}

dependencies {
    implementation "com.ibm.research.drl.dpt:data-privacy-toolkit:${dpt_version}"
    implementation "org.apache.logging.log4j:log4j-api:${log4j2_version}"
    implementation "org.apache.logging.log4j:log4j-core:${log4j2_version}"

    implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_dataformat_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_dataformat_version}"


    implementation "commons-cli:commons-cli:${commons_cli_version}"
    implementation "commons-io:commons-io:${commons_io_version}"

    testImplementation "org.junit.jupiter:junit-jupiter:${junit_jupiter_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
    testImplementation "org.hamcrest:hamcrest:${hamcrest_version}"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_launcher_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
}

repositories {
    mavenCentral()
    mavenLocal()
}

shadowJar {
    manifest {
        attributes 'Main-Class': 'com.ibm.research.drl.dpt.toolkit.Toolkit'
    }
    zip64 true
}

tasks.create(name: "testCoverage", type: JacocoReport, dependsOn: "test") {

    group = "Reporting"
    description = "Generate Jacoco coverage reports for the test build."

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    def excludes = [
            '**/*Test*.*',
            '**/actions/*.*',
    ]

    def javaClasses = fileTree(dir: "${buildDir}/classes/java/main", excludes: excludes)
    classDirectories.from = files([javaClasses])

    sourceDirectories.from = files([
            "$project.projectDir/src/main/java",
    ])

    executionData.from = files("${project.buildDir}/jacoco/test.exec")
}
