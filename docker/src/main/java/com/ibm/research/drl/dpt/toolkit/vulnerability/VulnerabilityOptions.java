/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.toolkit.vulnerability;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.ibm.research.drl.dpt.toolkit.task.TaskOptions;
import com.ibm.research.drl.dpt.vulnerability.ducc.DUCC;

import java.util.Optional;

public class VulnerabilityOptions extends TaskOptions {

    public Integer getMaxSize() {
        return maxSize;
    }

    public enum Algorithm {
        DUCC,
        FPVI,
        MTRA,
        BRUTE
    }

    private final Algorithm algorithm;
    private final boolean fullReport;
    private final int k;
    private final int nThreads;
    private final int batchSize;
    private final DUCC.Strategy strategy;
    private final int maxSize;

    public Algorithm getAlgorithm() {
        return algorithm;
    }

    public boolean isFullReport() {
        return fullReport;
    }

    public int getK() {
        return k;
    }

    public int getnThreads() {
        return nThreads;
    }

    public int getBatchSize() {
        return batchSize;
    }

    public DUCC.Strategy getStrategy() {
        return strategy;
    }

    @JsonCreator
    public VulnerabilityOptions(
            @JsonProperty("algorithm") Algorithm algorithm,
            @JsonProperty("fullReport") Boolean fullReport,
            @JsonProperty("kValue") Integer k,
            @JsonProperty("nThreads") Integer nThreads,
            @JsonProperty("batchSize") Integer batchSize,
            @JsonProperty("strategy") DUCC.Strategy strategy,
            @JsonProperty("maxSize") Integer maxSize) {
        this.algorithm = algorithm;
        this.fullReport = Optional.ofNullable(fullReport).orElse(false);
        this.k = Optional.ofNullable(k).orElse(5);
        this.nThreads = Optional.ofNullable(nThreads).orElse(1);
        this.batchSize = Optional.ofNullable(batchSize).orElse(100);
        this.strategy = strategy;
        this.maxSize = Optional.ofNullable(maxSize).orElse(-1);
    }
}
