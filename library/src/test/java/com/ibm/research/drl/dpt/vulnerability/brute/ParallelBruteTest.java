/*******************************************************************
 *                                                                 *
 * Copyright IBM Corp. 2016                                        *
 *                                                                 *
 *******************************************************************/
package com.ibm.research.drl.dpt.vulnerability.brute;


import com.ibm.research.drl.dpt.datasets.IPVDataset;
import com.ibm.research.drl.dpt.vulnerability.IPVVulnerability;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.InputStream;
import java.util.Collection;

import static java.time.Duration.ofMillis;
import static org.junit.jupiter.api.Assertions.*;

public class ParallelBruteTest {

    @Test
    public void testCorrectness() throws IOException {
        try (InputStream inputStream = ParallelBruteTest.class.getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            int k = 2;

            Brute brute = new Brute(k);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            ParallelBrute pBrute = new ParallelBrute(k, 4);
            Collection<IPVVulnerability> vulnerabilities = pBrute.apply(dataset);

            assertEquals(vulnerabilities.size(), bruteVulnerabilities.size());

            for (IPVVulnerability vulnerability : vulnerabilities) {
                assertTrue(bruteVulnerabilities.contains(vulnerability));
            }

        }
    }

    @Test
    public void testPerformance() throws Exception {
        try (InputStream inputStream = ParallelBruteTest.class.getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            int k = 2;

            ParallelBrute brute = new ParallelBrute(k, 4);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            assertEquals(21, bruteVulnerabilities.size());
        }
    }
}
