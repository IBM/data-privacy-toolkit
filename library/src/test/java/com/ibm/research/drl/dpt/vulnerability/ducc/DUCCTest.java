/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.vulnerability.ducc;

import com.ibm.research.drl.dpt.datasets.IPVDataset;
import com.ibm.research.drl.dpt.vulnerability.IPVVulnerability;
import com.ibm.research.drl.dpt.vulnerability.brute.Brute;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.not;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;


public class DUCCTest {

    @Disabled
    @Test
    public void testONSmallScaleFromMOH() {
        List<List<String>> syntheticDataset = new ArrayList<>();
        syntheticDataset.add( Arrays.asList("70", "7", "0", "0171", "1", "3", "3", "66", "1") );
        syntheticDataset.add( Arrays.asList("70", "7", "0", "0171", "2", "3", "3", "74", "1") );
        syntheticDataset.add( Arrays.asList("70", "7", "0", "0171", "2", "3", "3", "66", "1") );


        IPVDataset dataset = new IPVDataset(syntheticDataset, null, false);

        DUCC algorithm = new DUCC(1, DUCC.Strategy.RECURSIVE, 3);

        Collection<IPVVulnerability> vulnerabilities = algorithm.apply(dataset);

        System.out.println(vulnerabilities);
    }

    @Disabled
    @Test
    public void testOnDataLargerRecursive() throws Exception {
        try (InputStream inputStream = DUCCTest.class.getResourceAsStream("/adult-15-45000.data")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            DUCC algorithm = new DUCC(1, DUCC.Strategy.RECURSIVE, 2);
            Collection<IPVVulnerability> vulnerabilities = algorithm.apply(dataset);

            for (IPVVulnerability vulnerability : vulnerabilities) {
                System.out.println(vulnerability);
            }
        }
    }

    @Disabled
    @Test
    public void testOnDataLarger() throws Exception {
        try (InputStream inputStream = DUCCTest.class.getResourceAsStream("/adult-15-45000.data")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            DUCC algorithm = new DUCC(1, DUCC.Strategy.DESCENDING, 2);
            Collection<IPVVulnerability> vulnerabilities = algorithm.apply(dataset);

            for (IPVVulnerability vulnerability : vulnerabilities) {
                System.out.println(vulnerability);
            }
        }
    }

    @Test
    public void testCorrectnessSimple() throws Exception {
        try (InputStream inputStream = DUCCTest.class.getResourceAsStream("/adult-columns-5-7.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            int k = 2;

            Brute brute = new Brute(k);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            DUCC algorithm = new DUCC(1, DUCC.Strategy.DESCENDING, k);
            Collection<IPVVulnerability> vulnerabilities = algorithm.apply(dataset);

            assertEquals(bruteVulnerabilities.size(), vulnerabilities.size());

            for (IPVVulnerability vulnerability : vulnerabilities) {
                assertTrue(bruteVulnerabilities.contains(vulnerability));
            }
        }
    }

    @Test
    public void testCorrectness() throws Exception {
        try (InputStream inputStream = DUCCTest.class.getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);
            int k = 2;

            Brute brute = new Brute(k);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            DUCC algorithm = new DUCC(1, DUCC.Strategy.DESCENDING, k);
            Collection<IPVVulnerability> vulnerabilities = algorithm.apply(dataset);

            assertEquals(vulnerabilities.size(), bruteVulnerabilities.size());

            for (IPVVulnerability vulnerability : vulnerabilities) {
                assertTrue(bruteVulnerabilities.contains(vulnerability));
            }
        }
    }

    @Test
    public void testOnDataDescending() throws Exception {
        final List<String> expectedResults = new ArrayList<>(Arrays.asList(
                "[0]",
                "[3]",
                "[1,4]",
                "[2,4]"
        ));
        try (InputStream inputStream = DUCCTest.class.getResourceAsStream("/100.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);


            DUCC algorithm = new DUCC(1, DUCC.Strategy.DESCENDING, 3);
            Collection<IPVVulnerability> vulnerabilities = algorithm.apply(dataset);

            assertThat(vulnerabilities.size(), is(expectedResults.size()));

            for (IPVVulnerability vulnerability : vulnerabilities) {
                String vul = vulnerability.toString();
                assertTrue(expectedResults.contains(vul));

                int index = expectedResults.indexOf(vul);
                assertThat(index, not(-1));
                assertThat(expectedResults.remove(index), is(vul));
            }

            assertTrue(expectedResults.isEmpty());
        }
    }

    @Test
    public void testOnDataRecursive() throws Exception {
        final List<String> expectedResults = new ArrayList<>(Arrays.asList(
                "[0]",
                "[3]",
                "[1,4]",
                "[2,4]"
        ));
        try (InputStream inputStream = DUCCTest.class.getResourceAsStream("/100.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            DUCC algorithm = new DUCC(1, DUCC.Strategy.RECURSIVE, 3);
            Collection<IPVVulnerability> vulnerabilities = algorithm.apply(dataset);

            assertThat(vulnerabilities.size(), is(expectedResults.size()));

            for (IPVVulnerability vulnerability : vulnerabilities) {
                String vul = vulnerability.toString();
                assertTrue(expectedResults.contains(vul));

                int index = expectedResults.indexOf(vul);
                assertThat(index, not(-1));
                assertThat(expectedResults.remove(index), is(vul));
            }

            assertTrue(expectedResults.isEmpty());
        }
    }

    @Test
    public void testOnDataRecursiveWithSync() throws Exception {
        final List<String> expectedResults = new ArrayList<>(Arrays.asList(
                "[0]",
                "[3]",
                "[1,4]",
                "[2,4]"
        ));
        try (InputStream inputStream = DUCCTest.class.getResourceAsStream("/100.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            DUCC algorithm = new DUCC(1, DUCC.Strategy.RECURSIVE, 3);
            Collection<IPVVulnerability> vulnerabilities = algorithm.apply(dataset);

            assertThat(vulnerabilities.size(), is(expectedResults.size()));

            for (IPVVulnerability vulnerability : vulnerabilities) {
                String vul = vulnerability.toString();
                assertTrue(expectedResults.contains(vul));

                int index = expectedResults.indexOf(vul);
                assertThat(index, not(-1));
                assertThat(expectedResults.remove(index), is(vul));
            }

            assertTrue(expectedResults.isEmpty());
        }
    }
}
