/*******************************************************************
 *                                                                 *
 * Copyright IBM Corp. 2016                                        *
 *                                                                 *
 *******************************************************************/
package com.ibm.research.drl.dpt.vulnerability;


import com.ibm.research.drl.dpt.anonymization.VerificationUtils;
import com.ibm.research.drl.dpt.datasets.IPVDataset;
import com.ibm.research.drl.dpt.vulnerability.ducc.DUCC;
import com.ibm.research.drl.dpt.vulnerability.fpvi.FPVI;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.InputStream;
import java.util.Collection;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;

public class VulnerabilitiesTest {

    @Test
    public void testConsistentResults() throws Exception {
        try (InputStream inputStream = getClass().getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            int k = 2;

            DUCC algorithm = new DUCC(1, DUCC.Strategy.DESCENDING, k);
            Collection<IPVVulnerability> duccVulnerabilities = algorithm.apply(dataset);

            FPVI fpvi = new FPVI(10, 5000, 1.5, k);
            Collection<IPVVulnerability> fpviVulnerabilities = fpvi.apply(dataset);

            for (IPVVulnerability vulnerability : duccVulnerabilities) {
                assertTrue(VerificationUtils.isQuasiIdentifier(vulnerability.getItemSet(), dataset, k));
            }

            for (IPVVulnerability vulnerability : fpviVulnerabilities) {
                assertTrue(VerificationUtils.isQuasiIdentifier(vulnerability.getItemSet(), dataset, k));
            }

            assertEquals(duccVulnerabilities.size(), fpviVulnerabilities.size());

            for (IPVVulnerability vulnerability : fpviVulnerabilities) {
                assertTrue(duccVulnerabilities.contains(vulnerability));
            }
        }
    }
}

