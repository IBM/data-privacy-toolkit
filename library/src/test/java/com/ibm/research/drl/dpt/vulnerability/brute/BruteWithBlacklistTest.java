/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.vulnerability.brute;

import com.ibm.research.drl.dpt.datasets.IPVDataset;
import com.ibm.research.drl.dpt.vulnerability.IPVVulnerability;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.InputStream;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.Matchers.in;
import static org.hamcrest.Matchers.is;
import static org.hamcrest.Matchers.lessThan;
import static org.hamcrest.Matchers.not;
import static org.junit.jupiter.api.Assertions.assertEquals;

public class BruteWithBlacklistTest {

    @Test
    public void testCorrectnessWithBlacklistedMultipleElements() throws Exception {
        try (InputStream input = BruteWithBlacklistTest.class.getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(input, false, ',', '"', false);

            int k = 2;

            final Integer[] BLACK_LISTED = {0, 3};

            BruteWithBlacklist brute = new BruteWithBlacklist(k, Arrays.asList(BLACK_LISTED));
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            assertThat(bruteVulnerabilities.size(), lessThan(21));
            bruteVulnerabilities.forEach( vulnerability -> {
                for (int item : vulnerability.getItemSet().getItems()) {
                    assertThat(item, not(is(in(BLACK_LISTED))));
                }
            });
        }
    }

    @Test
    public void testCorrectnessWithBlacklisted() throws Exception {
        try (InputStream input = BruteWithBlacklistTest.class.getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(input, false, ',', '"', false);

            int k = 2;

            final int BLACK_LISTED = 0;

            BruteWithBlacklist brute = new BruteWithBlacklist(k, List.of(BLACK_LISTED));
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            assertThat(bruteVulnerabilities.size(), lessThan(21));
            bruteVulnerabilities.forEach( vulnerability -> {
                for (int item : vulnerability.getItemSet().getItems()) {
                    assertThat(item, is(not(BLACK_LISTED)));
                }
            });
        }
    }

    @Test
    public void testCorrectness() throws Exception {
        try (InputStream input = BruteWithBlacklistTest.class.getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(input, false, ',', '"', false);

            int k = 2;

            BruteWithBlacklist brute = new BruteWithBlacklist(k);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            assertEquals(21, bruteVulnerabilities.size());
        }
    }

    @Test
    @Disabled("For benchmark, too slow for CI/CD")
    public void testAdult() throws Exception {
        try (InputStream inputStream = BruteWithBlacklistTest.class.getResourceAsStream("/adult.data")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            int k = 10;

            BruteWithBlacklist brute = new BruteWithBlacklist(k);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            for (IPVVulnerability vulnerability : bruteVulnerabilities) {
                System.out.println(vulnerability.toString());
            }
        }
    }


    @Test
    @Disabled("For benchmark, too slow for CI/CD")
    public void testPerformance() throws Exception {
        try (InputStream inputStream = BruteWithBlacklistTest.class.getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            int k = 2;

            long start = System.currentTimeMillis();

            BruteWithBlacklist brute = new BruteWithBlacklist(k);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            assertEquals(21, bruteVulnerabilities.size());

            System.out.println("time for brute: " + (System.currentTimeMillis() - start));
        }
    }
}
