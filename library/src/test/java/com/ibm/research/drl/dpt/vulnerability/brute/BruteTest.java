/*******************************************************************
 *                                                                 *
 * Copyright IBM Corp. 2016                                        *
 *                                                                 *
 *******************************************************************/
package com.ibm.research.drl.dpt.vulnerability.brute;


import com.ibm.research.drl.dpt.datasets.IPVDataset;
import com.ibm.research.drl.dpt.vulnerability.IPVVulnerability;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.io.InputStream;
import java.util.Collection;

import static org.junit.jupiter.api.Assertions.assertEquals;

public class BruteTest {

    @Test
    public void testCorrectness() throws Exception {
        try (InputStream inputStream = BruteTest.class.getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            int k = 2;

            Brute brute = new Brute(k);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            assertEquals(21, bruteVulnerabilities.size());
        }
    }

    @Test
    public void testCorrectnessWithoutPruning() throws Exception {
        try (InputStream inputStream = BruteTest.class.getResourceAsStream("/adult-10-30000.data.csv")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            int k = 2;

            Brute brute = new Brute(k, false);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            assertEquals(1004, bruteVulnerabilities.size());
        }
    }

    @Test
    @Disabled
    public void testAdult() throws Exception {
        try (InputStream inputStream = BruteTest.class.getResourceAsStream("/adult.data")) {
            IPVDataset dataset = IPVDataset.load(inputStream, false, ',', '"', false);

            int k = 10;

            Brute brute = new Brute(k);
            Collection<IPVVulnerability> bruteVulnerabilities = brute.apply(dataset);

            for (IPVVulnerability vulnerability : bruteVulnerabilities) {
                System.out.println(vulnerability.toString());
            }
        }
    }
}
