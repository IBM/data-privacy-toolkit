/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.vulnerability.fpvi;

import com.ibm.research.drl.dpt.generators.IPVGenerator;
import com.ibm.research.drl.dpt.generators.ItemSet;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.NoSuchElementException;


public class FPVITaskGenerator implements Iterator<FPVITask> {
    private final int nParallelJobs;
    private final int maxSize;
    private final int batchSize;
    private final IPVGenerator generator;
    private final List<TaskEntry> nextTasks;
    private int idx;

    /**
     * Instantiates a new Fpvi task generator.
     *
     * @param nParallelJobs the n parallel jobs
     * @param maxSize       the max size
     * @param batchSize     the batch size
     * @param generator     the generator
     */
    public FPVITaskGenerator(final int nParallelJobs, final int maxSize, final int batchSize, final IPVGenerator generator) {
        this.nParallelJobs = nParallelJobs;
        this.maxSize = maxSize;
        this.batchSize = batchSize;
        this.generator = generator;
        nextTasks = new ArrayList<>(nParallelJobs);
        idx = 0;
    }

    @Override
    public boolean hasNext() {
        return generator.hasNext() || 0 != nextTasks.size();
    }

    @Override
    public FPVITask next() {
        if (0 == nextTasks.size() && !generator.hasNext()) throw new NoSuchElementException();

        if (generator.hasNext() && nextTasks.size() < nParallelJobs) {
            nextTasks.add(new TaskEntry(generator.next()));
        }

        idx %= nextTasks.size();

        final TaskEntry entry = nextTasks.get(idx);
        final FPVITask next = new FPVITask(entry.getItemSet(), entry.getIdx(), Math.min(entry.getIdx() + batchSize, maxSize));

        if (maxSize - batchSize <= entry.getIdx()) {
            nextTasks.remove(idx);
        } else {
            entry.add(batchSize);
            idx += 1;
        }

        return next;
    }

    /**
     * Ban.
     *
     * @param task the task
     */
    public void ban(FPVITask task) {
        // ban the itemset
        ItemSet itemSet = task.getItemSet();

        generator.ban(itemSet);

        // clean up
        nextTasks.removeIf(is -> itemSet.isSubSetOf(is.getItemSet()));
    }
}
