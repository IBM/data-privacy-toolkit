/*******************************************************************
 *                                                                 *
 * Copyright IBM Corp. 2021                                        *
 *                                                                 *
 *******************************************************************/
package com.ibm.research.drl.dpt.vulnerability.brute;

import com.ibm.research.drl.dpt.IPVAlgorithm;
import com.ibm.research.drl.dpt.anonymization.VerificationUtils;
import com.ibm.research.drl.dpt.datasets.IPVDataset;
import com.ibm.research.drl.dpt.generators.IPVGenerator;
import com.ibm.research.drl.dpt.generators.ItemSet;
import com.ibm.research.drl.dpt.generators.LayerGenerator;
import com.ibm.research.drl.dpt.vulnerability.IPVVulnerability;

import java.util.*;

public class BruteWithBlacklist implements IPVAlgorithm {
    private final int k;
    private final Set<Integer> blackList;

    public BruteWithBlacklist(int kValue) {
        this(kValue, Collections.emptySet());
    }

    public BruteWithBlacklist(int kValue, Collection<Integer> blackList) {
        this.k = kValue;
        this.blackList = new HashSet<>(blackList);
    }

    @Override
    public Collection<IPVVulnerability> apply(IPVDataset dataset) {
        Collection<ItemSet> quasiIdentifiers = new ArrayList<>();

        IPVGenerator generator = new LayerGenerator(dataset.getNumberOfColumns());

        nextItem: while(generator.hasNext()) {
            ItemSet itemSet = generator.next();

            if (isBlacklisted(itemSet)) {
                continue;
            }

            for (ItemSet qi : quasiIdentifiers) {
                if (qi.isSubSetOf(itemSet)) {
                    continue nextItem;
                }
            }

            if (VerificationUtils.isQuasiIdentifier(itemSet, dataset, this.k)) {
                quasiIdentifiers.add(itemSet);
            }
        }

        Collection<IPVVulnerability> vulnerabilities = new ArrayList<>();
        for(ItemSet itemSet: quasiIdentifiers) {
            vulnerabilities.add(new IPVVulnerability(itemSet));
        }

        return vulnerabilities;

    }

    private boolean isBlacklisted(ItemSet itemSet) {
        for (int item : itemSet.getItems()) {
            if (blackList.contains(item)) {
                return true;
            }
        }
        return false;
    }
}

