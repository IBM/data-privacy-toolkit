/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.vulnerability.fpvi;


import com.ibm.research.drl.dpt.datasets.IPVDataset;

import java.util.*;

public class FPVIIndex {
    private List<List<Set<Integer>>> rowIndexes;

    /**
     * Index fpvi index.
     *
     * @param dataset the dataset
     * @param nThread the n thread
     * @return the fpvi index
     */
    public FPVIIndex index(final IPVDataset dataset, final int nThread) {
        rowIndexes = new ArrayList<>(dataset.getNumberOfRows());

        final List<Map<Integer, Set<Integer>>> reverses = new ArrayList<>(dataset.getNumberOfColumns());

        for (int i = 0; i < dataset.getNumberOfColumns(); ++i) {
            reverses.add(new HashMap<>());
        }

        for (int i = 0; i < dataset.getNumberOfRows(); ++i) {
            final List<Set<Integer>> row = new ArrayList<>(dataset.getNumberOfColumns());

            for (int j = 0; j < dataset.getNumberOfColumns(); ++j) {
                final Map<Integer, Set<Integer>> rowIndex = reverses.get(j);
                final int h = dataset.hash(i, j);

                if (!rowIndex.containsKey(h)) {
                    rowIndex.put(h, new HashSet<>());
                }

                Set<Integer> entry = rowIndex.get(h);
                entry.add(i);

                row.add(entry);
            }

            rowIndexes.add(row);
        }

        return this;
    }

    public int numberOfRows() {
        return rowIndexes.size();
    }

    /**
     * Gets key set.
     *
     * @param row    the row
     * @param column the column
     * @return the key set
     */
    public Set<Integer> getKeySet(int row, int column) {
        return rowIndexes.get(row).get(column);
    }
}
