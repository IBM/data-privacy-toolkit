/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.vulnerability.ducc;

import com.ibm.research.drl.dpt.generators.ItemSet;

import java.util.HashSet;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.concurrent.locks.ReentrantLock;

public class DUCCPriorityBlockingQueue {
    private final ReentrantLock lock;

    private final PriorityQueue<ItemSet> queue;
    private final Set<DUCCWorker> activeWorkers;

    /**
     * Instantiates a new Ducc priority blocking queue.
     */
    public DUCCPriorityBlockingQueue() {
        lock = new ReentrantLock();
        queue = new PriorityQueue<>();
        activeWorkers = new HashSet<>();
    }

    /**
     * Add.
     *
     * @param itemSet the item set
     */
    public void add(ItemSet itemSet) {
        final ReentrantLock lock = this.lock;
        try {
            lock.lock();

            if (!queue.contains(itemSet)) {
                queue.add(itemSet);
            }
        } finally {
            lock.unlock();
        }
    }

    /**
     * Is empty boolean.
     *
     * @return the boolean
     */
    public boolean isEmpty() {
        final ReentrantLock lock = this.lock;
        try {
            lock.lock();

            return queue.isEmpty();
        } finally {
            lock.unlock();
        }
    }

    /**
     * Poll item set.
     *
     * @return the item set
     */
    public ItemSet poll() {
        final ReentrantLock lock = this.lock;
        try {
            lock.lock();

            return queue.poll();
        } finally {
            lock.unlock();
        }
    }

    /**
     * Remove super sets.
     *
     * @param itemSet the item set
     */
    public void removeSuperSets(ItemSet itemSet) {
        final ReentrantLock lock = this.lock;
        try {
            lock.lock();

            this.queue.removeIf(itemSet::isSubSetOf);
        } finally {
            lock.unlock();
        }
    }

    /**
     * Remove sub sets.
     *
     * @param itemSet the item set
     */
    public void removeSubSets(ItemSet itemSet) {
        final ReentrantLock lock = this.lock;
        try {
            lock.lock();

            this.queue.removeIf(is -> is.isSubSetOf(itemSet));
        } finally {
            lock.unlock();
        }
    }

    /**
     * Is there an active worker boolean.
     *
     * @return the boolean
     */
    public boolean isThereAnActiveWorker() {
        final ReentrantLock lock = this.lock;

        try {
            lock.lock();

            return 0 != activeWorkers.size();
        } finally {
            lock.unlock();
        }
    }

    /**
     * Done.
     *
     * @param duccWorker the ducc worker
     */
    public void done(DUCCWorker duccWorker) {
        final ReentrantLock lock = this.lock;

        try {
            lock.lock();

            activeWorkers.remove(duccWorker);
        } finally {
            lock.unlock();
        }
    }

    /**
     * Is active.
     *
     * @param duccWorker the ducc worker
     */
    public void isActive(DUCCWorker duccWorker) {
        final ReentrantLock lock = this.lock;

        try {
            lock.lock();

            activeWorkers.add(duccWorker);
        } finally {
            lock.unlock();
        }
    }
}
