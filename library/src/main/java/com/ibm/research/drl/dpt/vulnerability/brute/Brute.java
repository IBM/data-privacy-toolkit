/*******************************************************************
 *                                                                 *
 * Copyright IBM Corp. 2016                                        *
 *                                                                 *
 *******************************************************************/
package com.ibm.research.drl.dpt.vulnerability.brute;

import com.ibm.research.drl.dpt.IPVAlgorithm;
import com.ibm.research.drl.dpt.anonymization.VerificationUtils;
import com.ibm.research.drl.dpt.datasets.IPVDataset;
import com.ibm.research.drl.dpt.generators.IPVGenerator;
import com.ibm.research.drl.dpt.generators.ItemSet;
import com.ibm.research.drl.dpt.generators.LayerGenerator;
import com.ibm.research.drl.dpt.vulnerability.IPVVulnerability;

import java.util.ArrayList;
import java.util.Collection;

public class Brute implements IPVAlgorithm {
    private final int k;
    private boolean prune;

    public Brute(int kValue) {
        this(kValue, true);
    }

    public Brute(int kValue, boolean prune) {
        this.k = kValue;
        this.prune = prune;
    }

    @Override
    public Collection<IPVVulnerability> apply(IPVDataset dataset) {

        Collection<ItemSet> quasiIdentifiers = new ArrayList<>();

        IPVGenerator generator = new LayerGenerator(dataset.getNumberOfColumns());

        while(generator.hasNext()) {
            ItemSet itemSet = generator.next();

            boolean needsToBeChecked = true;
            for (ItemSet qi : quasiIdentifiers) {
                if (qi.isSubSetOf(itemSet)) {
                    needsToBeChecked = false;
                    break;
                }
            }

            if (needsToBeChecked) {
                if (VerificationUtils.isQuasiIdentifier(itemSet, dataset, this.k)) {
                    quasiIdentifiers.add(itemSet);
                }
            } else if (!prune) {
                quasiIdentifiers.add(itemSet);
            }

        }

        Collection<IPVVulnerability> vulnerabilities = new ArrayList<>();
        for(ItemSet itemSet: quasiIdentifiers) {
            vulnerabilities.add(new IPVVulnerability(itemSet));
        }

        return vulnerabilities;

    }
}
