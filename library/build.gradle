/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
apply plugin: 'java-library'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'signing'

apply plugin: 'org.barfuin.gradle.taskinfo'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.barfuin.gradle.taskinfo:gradle-taskinfo:2.1.0"
    }
}

ext {
    junit_jupiter_version = '5.10.0'
    junit_platform_launcher_version = '1.10.1'

    mockito_version = '5.4.0'
    jdefault_version = '2.0.0'
    hamcrest_version = '2.2'

    jackson_version = '2.15.3'
    jackson_dataformat_version = '2.15.3'

    log4j2_version = '2.20.0'

    commons_codec_version = '1.13'
    commons_csv_version = '1.10.0'
    commons_lang_version = '3.12.0'
    commons_math_version = '3.6.1'
    commons_text_version = '1.8'
    commons_validator_version = '1.7'
    pdfbox_version = '3.0.1'

    poi_version = "5.2.3"

    open_nlp_version = "2.5.4"
}

dependencies {
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_dataformat_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_dataformat_version}"

    implementation "org.apache.commons:commons-lang3:${commons_lang_version}"
    implementation "org.apache.commons:commons-csv:${commons_csv_version}"
    implementation "org.apache.commons:commons-math3:${commons_math_version}"
    implementation "commons-validator:commons-validator:${commons_validator_version}"

    implementation "org.apache.logging.log4j:log4j-api:${log4j2_version}"
    implementation "org.apache.poi:poi-ooxml:${poi_version}"
    implementation "org.apache.pdfbox:pdfbox:${pdfbox_version}"

    implementation "ca.uhn.hapi:hapi-base:2.6.0"
    implementation "ca.uhn.hapi:hapi-structures-v22:2.3"
    implementation "ca.uhn.hapi:hapi-structures-v23:2.3"
    implementation 'org.iban4j:iban4j:3.2.5-RELEASE'

    implementation "org.apache.opennlp:opennlp-tools:${open_nlp_version}"
    testImplementation "org.apache.logging.log4j:log4j-core:${log4j2_version}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junit_jupiter_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation "org.hamcrest:hamcrest:${hamcrest_version}"
    testImplementation("org.beer30:jdefault:${jdefault_version}"){
        exclude group: "org.slf4j", module: "slf4j-simple"
    }

    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_launcher_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
}

sourceCompatibility = '11'
targetCompatibility = '11'

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    minHeapSize = "5g"
    maxHeapSize = "10g"

    testLogging {
        events 'failed'
        exceptionFormat 'short'

        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams false
    }
}

group = 'com.ibm.research.drl.dpt'
version = '6.0.0-SNAPSHOT'

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        url = uri('https://www.dcm4che.org/maven2')
    }

    maven {
        name = "OSSRH"
        url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
        credentials {
            username = "$System.env.OSSRH_USERNAME"
            password = "$System.env.OSSRH_PASSWORD"
        }
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
    archiveClassifier = "javadoc"
}

publishing {
    publications {
        mavenCentral(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'Data Privacy Toolkit'
                packaging = 'jar'
                description = 'The IBM Data Privacy Toolkit (DPT).'
                url = "https://github.com/IBM/data-privacy-toolkit"

                scm {
                    connection = "https://github.com/IBM/data-privacy-toolkit.git"
                    developerConnection = "https://github.com/IBM/data-privacy-toolkit.git"
                    url = "https://github.com/IBM/data-privacy-toolkit"
                }

                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }

                developers {
                    developer {
                        id = 'stefano'
                        name = 'Stefano Braghin'
                        email = 'stefanob@ie.ibm.com'
                    }
                    developer {
                        id = 'marco'
                        name = 'Marco Simioni'
                        email = 'marco.simioni@ibm.com'
                    }
                }
            }
            ext.repo = 'OSSRH'
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl =  "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            credentials {
                username = "$System.env.OSSRH_USERNAME"
                password = "$System.env.OSSRH_PASSWORD"
            }
        }
    }
}


signing {
    if ("$System.env.OSSRH_GPG_SECRET_KEY" != "null" && "$System.env.OSSRH_GPG_SECRET_KEY_PASSWORD" != "null") {
        def signingKey = "$System.env.OSSRH_GPG_SECRET_KEY"
        def signingPassword = "$System.env.OSSRH_GPG_SECRET_KEY_PASSWORD"
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenCentral
    }
}

task testCoverage(type: JacocoReport, dependsOn: "test") {
    group = "Reporting"
    description = "Generate Jacoco coverage reports for the test build."

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    def excludes = [
            '**/*Test*.*',
            '**/actions/*.*',
    ]

    def javaClasses = fileTree(dir: "${buildDir}/classes/java/main", excludes: excludes)
    classDirectories.from = files([javaClasses])

    sourceDirectories.from = files([
            "$project.projectDir/src/main/java",
    ])

    executionData.from = files("${project.buildDir}/jacoco/test.exec")
}
