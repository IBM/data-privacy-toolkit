import React, { Component } from 'react'
import { connect } from 'react-redux'

import DatasetViewer from '../components/DatasetViewer'
import SensitivitySelector from '../components/SensitivitySelector'
import VulnerabilityFinder from '../components/VulnerabilityFinder'
import AlgorithmSelector from '../components/AlgorithmSelector'

import Legend from '../components/Legend'

import { getMaskingProvidersIfNeeded } from '../actions/maskingProviders'
import { NORMAL, DIRECT_IDENTIFIER, K_QUASI_IDENTIFIER, E_QUASI_IDENTIFIER, SENSITIVE, analyzeDataset, updateColumnValue } from '../actions/risk'

import { getFieldColor } from '../utilities'

class VulnerabilityDetection extends Component {
  constructor (props) {
    super(props)

    this.state = {
      k: 10,
      algorithms: [
        {name: 'DUCC'},
        {name: 'FPVI'}
      ],
      selectedAlgorithm: 'DUCC'
    }
  }

  render () {
    const headers = this.buildHeaderRow()

    return (
      <div className='container-fluid'>
        <DatasetViewer dataset={this.props.dataset || []} hasHeader={this.props.hasHeader} headers={headers} />
        <VulnerabilityFinder k={this.state.k} onKChange={
          event => this.setState(Object.assign({}, this.state, {k: Number(event.target.value)}))
        }
          onClick={() => this.props.analyzeDataset(this.props.dataset, this.props.hasHeader, this.state.k, this.state.selectedAlgorithm)}
          disabled={undefined === this.state.selectedAlgorithm}
        >
          <AlgorithmSelector algorithms={this.state.algorithms} selected={this.state.selectedAlgorithm} onChange={event => this.setState(Object.assign({}, this.state, {selectedAlgorithm: event.target.value}))} />
        </VulnerabilityFinder>
        <Legend />
      </div>
    )
  }

  componentWillReceiveProps (nextProps) {
    this.setState(Object.assign({}, this.state, {
      direct: nextProps.direct,
      kQuasi: nextProps.kQuasi,
      eQuasi: nextProps.eQuasi,
      sensitive: nextProps.sensitive
    }))
  }

  componentDidMount () {
    if (!this.props.dataset) {
      this.props.history.goBack()
    }
  }

  getFieldColor (sensitivity) {
    switch (sensitivity) {
      case DIRECT_IDENTIFIER:
        return 'directIdentifier'
      case K_QUASI_IDENTIFIER:
        return 'kQuasiIdentifier'
      case E_QUASI_IDENTIFIER:
        return 'eQuasiIdentifier'
      case SENSITIVE:
        return 'sensitiveField'
      case NORMAL:
      default:
        return ''
    }
  }

  getFieldSensitivity (fieldId) {
    const { direct, kQuasi, eQuasi, sensitive } = this.props

    if (direct.has(fieldId)) return DIRECT_IDENTIFIER
    if (kQuasi.has(fieldId)) return K_QUASI_IDENTIFIER
    if (eQuasi.has(fieldId)) return E_QUASI_IDENTIFIER
    if (sensitive.has(fieldId)) return SENSITIVE

    return NORMAL
  }

  buildHeaderRow () {
    if (this.props.headers && this.props.providers) {
      return this.props.dataset[0].map((v, i) => {
        const columnName = this.props.hasHeader ? v : `Column ${i}`;
        const provider = this.props.headers[columnName] || {}
        const providerName = provider.name || 'UNKNOWN'

        const fieldSensitivity = this.getFieldSensitivity(i)
        const fieldContainerClasses = `fieldTypeContainer ${getFieldColor(fieldSensitivity)}`

        return (
          <SensitivitySelector key={i}
            providerName={providerName}
            fieldSensitivity={fieldSensitivity}
            fieldContainerClasses={fieldContainerClasses}
            onChange={(event) => {
              const value = event.target.value
              console.log(`Setting ${columnName} to ${value}`)
              this.props.updateColumnValue(i, value)
            }}
          />
        )
      })
    }
  }
}

const arrayToCSV = a => {
  return a.map(b => b.join()).join('\n')
}

const mapStateToProps = state => {
  return {
    dataset: state.workflow.dataset,
    hasHeader: Boolean(state.workflow.hasHeader),
    headers: state.workflow.identifiedTypes,
    providers: state.maskingProviders.data,
    direct: new Set(state.workflow.direct),
    kQuasi: new Set(state.workflow.kQuasi),
    eQuasi: new Set(state.workflow.eQuasi),
    sensitive: new Set(state.workflow.sensitive)
  }
}

const mapDispatchToProps = dispatch => {
  return {
    getMaskingProviders: () => {
      dispatch(getMaskingProvidersIfNeeded())
    },
    analyzeDataset: (data, hasHeader, k, algorithmName) => {
      dispatch(analyzeDataset(arrayToCSV(data, hasHeader), hasHeader, k, algorithmName))
    },
    updateColumnValue: (index, sensitivity) => {
      dispatch(updateColumnValue(index, sensitivity))
    }
  }
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)(VulnerabilityDetection)
