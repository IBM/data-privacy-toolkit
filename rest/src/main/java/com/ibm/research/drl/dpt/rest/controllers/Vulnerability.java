/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.rest.controllers;

import com.ibm.research.drl.dpt.IPVAlgorithm;
import com.ibm.research.drl.dpt.datasets.IPVDataset;
import com.ibm.research.drl.dpt.rest.exceptions.InvalidRequestException;
import com.ibm.research.drl.dpt.vulnerability.IPVVulnerability;
import com.ibm.research.drl.dpt.vulnerability.brute.Brute;
import com.ibm.research.drl.dpt.vulnerability.ducc.DUCC;
import com.ibm.research.drl.dpt.vulnerability.fpvi.FPVI;
import com.ibm.research.drl.dpt.vulnerability.mtra.MTRA;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;

@RestController
public class Vulnerability {
    @PostMapping(value = "/api/feature/analyze/{algorithmName}/{kValue}/{hasHeader}", consumes = {MediaType.TEXT_PLAIN_VALUE, "text/csv"})
    public Collection<IPVVulnerability> analyzeDataset(
            @PathVariable("algorithmName") String algorithmName,
            @PathVariable("kValue") final int kValue,
            @PathVariable("hasHeader") final boolean hasHeader,
            @RequestBody String body) {
        try (Reader reader = new StringReader(body)) {
            IPVDataset dataset = IPVDataset.load(reader, hasHeader, ',', '"', false);

            return generateAlgorithm(algorithmName, kValue).apply(dataset);
        } catch (Exception e) {
            e.printStackTrace();
            throw new InvalidRequestException(e.getMessage());
        }
    }

    private IPVAlgorithm generateAlgorithm(String algorithmName, int kValue) {
        switch (algorithmName.toLowerCase()) {
            case "fpvi":
                return new FPVI(getUsableProcessors(), 1000, 1.5, kValue);

            case "ducc":
                return new DUCC(getUsableProcessors(), DUCC.Strategy.DESCENDING, kValue);

            case "mtra":
                return new MTRA(getUsableProcessors(), 1.5);

            case "mtsu":
                throw new InvalidRequestException("Algorithm not supported " + algorithmName);
            default:
                return new Brute(kValue, true);
        }
    }

    private int getUsableProcessors() {
        return Math.max(2, Runtime.getRuntime().availableProcessors() - 1);
    }
}
