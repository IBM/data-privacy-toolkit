package com.ibm.research.drl.dpt.spark.task.option;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.ibm.research.drl.dpt.vulnerability.ducc.DUCC;

import java.util.Optional;

public class VulnerabilityTaskOptions implements TaskOptions{

    public enum Algorithm {
        DUCC,
        FPVI,
        MTRA,
        BRUTE
    }

    private final Algorithm algorithm;
    private final boolean fullReport;
    private final int k;
    private final int nThreads;
    private final int batchSize;
    private final DUCC.Strategy strategy;

    public Algorithm getAlgorithm() {
        return algorithm;
    }

    public boolean isFullReport() {
        return fullReport;
    }

    public int getK() {
        return k;
    }

    public int getnThreads() {
        return nThreads;
    }

    public int getBatchSize() {
        return batchSize;
    }

    public DUCC.Strategy getStrategy() {
        return strategy;
    }

    @JsonCreator
    public VulnerabilityTaskOptions(
            @JsonProperty("algorithm") Algorithm algorithm,
            @JsonProperty("fullReport") Boolean fullReport,
            @JsonProperty("kValue") Integer k,
            @JsonProperty("nThreads") Integer nThreads,
            @JsonProperty("batchSize") Integer batchSize,
            @JsonProperty("strategy") DUCC.Strategy strategy) {
        this.algorithm = algorithm;
        this.fullReport = Optional.ofNullable(fullReport).orElse(false);
        this.k = Optional.ofNullable(k).orElse(5);
        this.nThreads = Optional.ofNullable(nThreads).orElse(1);
        this.batchSize = Optional.ofNullable(batchSize).orElse(100);
        this.strategy = strategy;
    }
}
