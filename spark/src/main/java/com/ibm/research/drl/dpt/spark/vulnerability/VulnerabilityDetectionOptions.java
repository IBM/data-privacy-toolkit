/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.spark.vulnerability;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.ibm.research.drl.dpt.exceptions.MisconfigurationException;

import java.util.Collections;
import java.util.Objects;
import java.util.Set;

public class VulnerabilityDetectionOptions {
    private final Set<String> excludedFields;
    private final int k;
    private final VulnerabilityDetectionStrategy strategy;
    private final int maxSize;

    private final boolean report;

    public static VulnerabilityDetectionOptions fromJson(TreeNode n) throws JsonProcessingException {
        return  new ObjectMapper().treeToValue(n, VulnerabilityDetectionOptions.class);
    }

    @JsonCreator
    public VulnerabilityDetectionOptions(
            @JsonProperty(value = "k", required = true) int k,
            @JsonProperty(value = "excludedFields", defaultValue = "[]") Set<String> excludedFields,
            @JsonProperty(value = "strategy", required = true) VulnerabilityDetectionStrategy strategy,
            @JsonProperty(value = "maxSize", defaultValue = "-1") int maxSize,
            @JsonProperty(value = "report", defaultValue = "false") boolean report) {
        this.report = report;
        this.strategy = strategy;
        this.maxSize = maxSize;
        if (k <= 1) throw new MisconfigurationException("K value must be greater that 1 ( " + k + " was passed)");
        this.k = k;
        this.excludedFields = Objects.isNull(excludedFields) ? Collections.emptySet() : excludedFields;
    }

    public Set<String> getExcludedFields() {
        return excludedFields;
    }

    public int getK() {
        return k;
    }

    public VulnerabilityDetectionStrategy getStrategy() { return strategy; }

    public boolean isReport() {
        return report;
    }

    public int getMaxSize() {
        return maxSize;
    }
}
