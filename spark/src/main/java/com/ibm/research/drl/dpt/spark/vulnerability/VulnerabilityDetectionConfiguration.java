/*******************************************************************
 *                                                                 *
 * Copyright IBM Corp. 2016                                        *
 *                                                                 *
 *******************************************************************/
package com.ibm.research.drl.dpt.spark.vulnerability;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.JsonNode;
import com.ibm.research.drl.dpt.configuration.DataTypeFormat;
import com.ibm.research.drl.dpt.datasets.CSVDatasetOptions;
import com.ibm.research.drl.dpt.datasets.DatasetOptions;
import com.ibm.research.drl.dpt.exceptions.MisconfigurationException;

import java.util.Collections;
import java.util.Objects;
import java.util.Set;

public class VulnerabilityDetectionConfiguration {
    private final Set<String> excludedFields;
    private final DatasetOptions datasetOptions;
    private final DataTypeFormat dataTypeFormat;
    private final int k;
    private final boolean fullExploration;
    private final int maxSize;

    @JsonCreator
    public VulnerabilityDetectionConfiguration(
            @JsonProperty(value = "k", required = true) int k,
            @JsonProperty(value = "inputFormat", required = true) DataTypeFormat dataTypeFormat,
            @JsonProperty(value = "excludedFields", defaultValue = "[]") Set<String> excludedFields,
            @JsonProperty(value = "datasetOptions", defaultValue = "{}") JsonNode datasetOptions,
            @JsonProperty(value = "fullExploration", defaultValue = "false") boolean fullExploration,
            @JsonProperty(value = "maxSize", defaultValue = "-1") int maxSize) {
        this.fullExploration = fullExploration;
        this.maxSize = maxSize;
        if (k <= 1) throw new MisconfigurationException("K value must be greater that 1 ( " + k + " was passed)");
        this.k = k;
        this.dataTypeFormat = dataTypeFormat;
        this.excludedFields = Objects.isNull(excludedFields) ? Collections.emptySet() : excludedFields;

        if (dataTypeFormat == DataTypeFormat.CSV) {
            if (! datasetOptions.has("quoteChar")) throw new MisconfigurationException("Missing quote character for CSV dataset options");
            if (! datasetOptions.has("delimiter")) throw new MisconfigurationException("Missing field delimiter for CSV dataset options");

            final Character quoteChar =  datasetOptions.get("quoteChar").asText().charAt(0);
            final Character fieldDelimiter = datasetOptions.get("delimiter").asText().charAt(0);;
            boolean hasHeader = datasetOptions.has("hasHeader") && datasetOptions.get("hasHeader").booleanValue();
            this.datasetOptions = new CSVDatasetOptions(
                hasHeader, fieldDelimiter, quoteChar, false
            );
        } else {
            this.datasetOptions = null;
        }
    }

    public Set<String> getExcludedFields() {
        return excludedFields;
    }

    public int getK() {
        return k;
    }

    public DatasetOptions getDatasetOptions() {
        return datasetOptions;
    }

    public DataTypeFormat getDataTypeFormat() {
        return dataTypeFormat;
    }

    public boolean isFullExploration() {
        return fullExploration;
    }

    public int getMaxSize() {
        return maxSize;
    }
}
