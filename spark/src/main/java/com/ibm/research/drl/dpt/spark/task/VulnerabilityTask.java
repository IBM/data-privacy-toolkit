/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.spark.task;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.ibm.research.drl.dpt.spark.dataset.reference.DatasetReference;
import com.ibm.research.drl.dpt.spark.task.option.VulnerabilityTaskOptions;
import com.ibm.research.drl.dpt.spark.vulnerability.BruteWithDataset;
import com.ibm.research.drl.dpt.vulnerability.IPVVulnerability;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.apache.spark.sql.RowFactory;
import org.apache.spark.sql.SparkSession;
import org.apache.spark.sql.types.DataTypes;
import org.apache.spark.sql.types.Metadata;
import org.apache.spark.sql.types.StructField;
import org.apache.spark.sql.types.StructType;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class VulnerabilityTask extends SparkTaskToExecute {
    private final VulnerabilityTaskOptions taskOptions;

    @JsonCreator
    public VulnerabilityTask(
            @JsonProperty("task") String task,
            @JsonProperty("inputOptions") DatasetReference inputOptions,
            @JsonProperty("outputOptions") DatasetReference outputOptions,
            @JsonProperty("taskOptions") VulnerabilityTaskOptions taskOptions
    ) {
        super(task, inputOptions, outputOptions);

        this.taskOptions = taskOptions;
    }

    private VulnerabilityTaskOptions getTaskOptions() {
        return this.taskOptions;
    }


    private Set<Integer> getQuasiIdentifiers(Collection<IPVVulnerability> vulnerabilities) {
        return vulnerabilities.stream()
                .map(vulnerability -> vulnerability.getItemSet().getItems())
                .filter( items -> items.size() != 1)
                .flatMap(Collection::stream)
                .collect(Collectors.toSet());
    }

    private Set<Integer> getDirectIdentifiers(Collection<IPVVulnerability> vulnerabilities) {
        return vulnerabilities.stream()
                .map(vulnerability -> vulnerability.getItemSet().getItems())
                .filter( items -> items.size() == 1)
                .flatMap(Collection::stream)
                .collect(Collectors.toSet());
    }

    @Override
    public Dataset<Row> process(Dataset<Row> dataset) {
        int maxSize = -1;
        Set<Integer> excludedFields = new HashSet<>();
        int k = taskOptions.getK();
        Collection<IPVVulnerability> vulnerabilities = BruteWithDataset.findVulnerabilities(dataset, excludedFields, k, maxSize);

        Set<Integer> quasiIdentifiers = getQuasiIdentifiers(vulnerabilities);
        Set<Integer> directIdentifiers = getDirectIdentifiers(vulnerabilities);

        return writeReport(
                dataset.sparkSession(),
                dataset.columns(),
                quasiIdentifiers,
                directIdentifiers
        );
    }

    private Dataset<Row> writeReport(SparkSession sparkSession, String[] columnNames, Set<Integer> quasiIdentifiers, Set<Integer> directIdentifiers) {
        return sparkSession.createDataFrame(
                IntStream.range(0, columnNames.length)
                        .mapToObj(position -> RowFactory.create(
                                this.taskOptions.getK(),
                                quasiIdentifiers.contains(position) ? "QUASI" : (
                                        directIdentifiers.contains(position) ? "DIRECT" : "NORMAL"
                                ),
                                columnNames[position]
                        )).collect(Collectors.toList()),
                new StructType(new StructField[]{
                        new StructField("k", DataTypes.IntegerType, false, Metadata.empty()),
                        new StructField("Type", DataTypes.StringType, false, Metadata.empty()),
                        new StructField("Field Name", DataTypes.StringType, false, Metadata.empty())
                }));
    }

    public Map<String, Object> reportToMap(Dataset<Row> output) {
        List<Row> localData = output.collectAsList();

        String[] columns = localData.get(0).schema().names();
        return Map.of(
                "k", localData.get(0).getInt(find("k", columns)),
                "direct-identifiers", buildDirectIdentifiers(localData, find("Type", columns), find("Field Name", columns)),
                "quasi-identifiers", buildQuasiIdentifiers(localData, find("Type", columns), find("Field Name", columns))
        );
    }

    private List<String> buildQuasiIdentifiers(List<Row> data, int typeColumn, int fieldNameColumn) {
        return data.stream().filter(row -> row.get(typeColumn).equals("QUASI")).map(row -> row.getString(fieldNameColumn)).collect(Collectors.toList());
    }

    private List<String> buildDirectIdentifiers(List<Row> data, int typeColumn, int fieldNameColumn) {
        return data.stream().filter(row -> row.get(typeColumn).equals("DIRECT")).map(row -> row.getString(fieldNameColumn)).collect(Collectors.toList());
    }

    private int find(String fieldName, String[] columns) {
        for (int i = 0; i < columns.length; ++i) {
            if (columns[i].equals(fieldName)) {
                return i;
            }
        }
        throw new IllegalArgumentException("Field name not found: " + fieldName);
    }
}

