/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.spark.vulnerability;

import com.ibm.research.drl.dpt.generators.IPVGenerator;
import com.ibm.research.drl.dpt.generators.ItemSet;
import com.ibm.research.drl.dpt.generators.LevelGenerator;
import com.ibm.research.drl.dpt.vulnerability.IPVVulnerability;
import org.apache.commons.csv.CSVFormat;
import org.apache.commons.csv.CSVParser;
import org.apache.commons.csv.CSVPrinter;
import org.apache.commons.csv.CSVRecord;
import org.apache.commons.csv.QuoteMode;
import org.apache.spark.api.java.JavaRDD;
import org.apache.spark.api.java.function.Function;
import org.apache.spark.api.java.function.Function2;
import org.apache.spark.api.java.function.PairFlatMapFunction;
import scala.Tuple2;

import java.io.IOException;
import java.io.StringWriter;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;

public class BruteSpark {

    private static int extractNumberOfColumns(String line, String delimiter) throws IOException {
        try (CSVParser parser = CSVParser.parse(line, CSVFormat.RFC4180.withDelimiter(delimiter.charAt(0)));) {
            return parser.getRecords().get(0).size();
        }
    }

    public static String rowToCSVString(List<String> row, Character delimiter) throws IOException {
        try (StringWriter stringWriter = new StringWriter();
             CSVPrinter writer = new CSVPrinter(stringWriter, CSVFormat.RFC4180.withDelimiter(delimiter).withQuoteMode(QuoteMode.MINIMAL))) {
            writer.printRecord(row);

            return stringWriter.toString().trim();
        }
    }

    private static String createKey(Collection<Integer> columns, String row, String delimiter) throws IOException {
        try(CSVParser parser = CSVParser.parse(row, CSVFormat.RFC4180.withDelimiter(delimiter.charAt(0)))) {

            CSVRecord record = parser.getRecords().get(0);
            List<String> values = new ArrayList<>();

            for (Integer column : columns) {
                values.add(record.get(column));
            }

            return rowToCSVString(values, delimiter.charAt(0));
        }
    }

    private static List<Boolean> isQuasiIdentifier(final List<ItemSet> itemSets, JavaRDD<String> rdd, final int k, final String delimiter) {
        List<String> quasis = rdd.flatMapToPair((PairFlatMapFunction<String, String, Long>) s -> {
            List<Tuple2<String, Long>> projections = new ArrayList<>();

            for(int i = 0; i < itemSets.size(); i++) {
                ItemSet itemSet = itemSets.get(i);
                String key = i + "::" + createKey(itemSet.getItems(), s, delimiter);
                projections.add(new Tuple2<>(key, 1L));
            }

            return projections.iterator();
        }).reduceByKey((Function2<Long, Long, Long>) Long::sum)
                .filter((Function<Tuple2<String, Long>, Boolean>) t -> t._2() < k)
                .keys().map((Function<String, String>) s -> s.split("::")[0])
                .distinct().collect();

        List<Boolean> results = new ArrayList<>();
        for(int i = 0; i < itemSets.size(); i++) {
            results.add(Boolean.FALSE);
        }

        for(String quasiIndex: quasis) {
            int index = Integer.parseInt(quasiIndex);
            results.set(index, Boolean.TRUE);
        }

        return results;

    }

    private static void detectQuasiIdentifiers(List<ItemSet> itemSets, JavaRDD<String> rdd, final int k, final String delimiter,
                                               IPVGenerator generator) {

        List<Boolean> flags = isQuasiIdentifier(itemSets, rdd, k, delimiter);

        for(int i = 0; i < flags.size(); i++) {
            if (flags.get(i) == Boolean.TRUE) {
                generator.ban(itemSets.get(i));
            }
        }

    }

    public static Collection<IPVVulnerability> run(JavaRDD<String> rdd, int k, int batchSize, boolean hasHeader, String delimiter, char quoteChar) throws IOException {

        if (hasHeader) {
            rdd = rdd.zipWithIndex().filter((Function<Tuple2<String, Long>, Boolean>) s -> (s._2() > 0)).keys();
        }

        String firstLine = rdd.first();

        int numberOfColumns = extractNumberOfColumns(firstLine, delimiter);

        Collection<ItemSet> banned = new HashSet<>();

        for(int i = 1; i <= numberOfColumns; i++ ) {
            long processedThisLevel = 0L;

            IPVGenerator generator = new LevelGenerator(banned, numberOfColumns, i);

            List<ItemSet> batch = new ArrayList<>();
            while (generator.hasNext()) {
                ItemSet itemSet = generator.next();

                batch.add(itemSet);
                if (batch.size() == batchSize) {
                    processedThisLevel += batchSize;
                    detectQuasiIdentifiers(batch, rdd, k, delimiter, generator);
                    batch.clear();
                }
            }

            if (batch.size() > 0) {
                processedThisLevel += batch.size();
                detectQuasiIdentifiers(batch, rdd, k, delimiter, generator);
            }

            if (processedThisLevel == 0L) {
                break;
            }

            banned = generator.getBanned();
        }

        Collection<IPVVulnerability> vulnerabilities = new ArrayList<>();
        for(ItemSet itemSet: banned) {
            vulnerabilities.add(new IPVVulnerability(itemSet));
        }

        return vulnerabilities;
    }

}
