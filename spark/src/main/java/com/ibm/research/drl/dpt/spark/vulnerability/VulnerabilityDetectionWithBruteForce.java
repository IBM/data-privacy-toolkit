/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
package com.ibm.research.drl.dpt.spark.vulnerability;

import com.ibm.research.drl.dpt.generators.ItemSet;
import com.ibm.research.drl.dpt.generators.LayerGenerator;
import org.apache.spark.sql.Column;
import org.apache.spark.sql.Dataset;
import org.apache.spark.sql.Row;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.*;
import java.util.stream.Collectors;

import static org.apache.spark.sql.functions.*;

public class VulnerabilityDetectionWithBruteForce extends VulnerabilityDetection {
    private static final String AGGREGATED_COUNT_NAME = "__AGGREGATED_COUNT_NAME__";
    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityDetectionWithBruteForce.class);

    @Override
    public Collection<List<String>> findVulnerabilities(Dataset<Row> dataset, int k, int maxSize) {
        List<String> columnNames = Arrays.asList(dataset.columns());
        final LayerGenerator generator = new LayerGenerator(columnNames.size());

        while (generator.hasNext()) {
            final ItemSet itemSet = generator.next();

            if (hasReachedMaxSize(maxSize, itemSet)) {
                logger.info("Max size reached");
                break;
            }

            logger.info("Testing {}", itemSet);

            final Column[] selectionColumns = computeSelectColumn(itemSet, columnNames.toArray(new String[columnNames.size()]));
            
            if (isQuasiIdentifier(dataset, selectionColumns, k)) {
                logger.info("Banning {}", itemSet);
                generator.ban(itemSet);
            }
        }

        return generator.getBanned().parallelStream().
                map(itemSet -> {
                    List<String> vulnerableFields = new ArrayList<>(itemSet.size());

                    for (int item : itemSet.getItems()) {
                        vulnerableFields.add(columnNames.get(item));
                    }

                    return vulnerableFields;
                }).collect(Collectors.toList());
    }

    private boolean hasReachedMaxSize(int maxSize, ItemSet itemSet) {
        return maxSize > 0 &&
                itemSet.size() > maxSize;
    }

    private boolean isQuasiIdentifier(Dataset<Row> dataset, Column[] selectionColumns, int k) {
        Dataset<Row> selection = dataset.
                groupBy(selectionColumns).
                agg(count(lit(1)).as(AGGREGATED_COUNT_NAME)).
                filter(col(AGGREGATED_COUNT_NAME).lt(lit(k)));

        return selection.count() > 0;
    }

    private Column[] computeSelectColumn(ItemSet itemSet, String[] columnNames) {
        final Column[] selectColumns = new Column[itemSet.size()];

        int i = 0;
        for (int item : itemSet.getItems()) {
            selectColumns[i++] = col(columnNames[item]);
        }

        return selectColumns;
    }

    protected Map<List<String>, Long> computeOffendingRecords(final Dataset<Row> dataset, final Collection<List<String>> vulnerabilities, final int k) {
        Map<List<String>, Long> result = new HashMap<>(vulnerabilities.size());

        for (final List<String> vulnerability : vulnerabilities) {
            result.put(vulnerability, computeOffendingRecords(dataset, vulnerability, lit(k)));
        }

        return result;
    }

    protected long computeOffendingRecords(Dataset<Row> dataset, List<String> vulnerability, Column k) {
        Row[] rows = (Row[]) dataset.groupBy(buildGroupBy(vulnerability))
                .agg(count(lit(1)).as(AGGREGATED_COUNT_NAME))
                .filter(col(AGGREGATED_COUNT_NAME).lt(k))
                .agg(sum(col(AGGREGATED_COUNT_NAME)).as(AGGREGATED_COUNT_NAME))
                .collect();

        Row actualRow = rows[0];
        int idx = actualRow.fieldIndex(AGGREGATED_COUNT_NAME);

        return actualRow.getLong(idx);
    }

    private Column[] buildGroupBy(List<String> vulnerability) {
        final Column[] groupBy = new Column[vulnerability.size()];

        for (int i = 0; i < groupBy.length; ++i) {
            groupBy[i] = col(vulnerability.get(i));
        }

        return groupBy;
    }
}
