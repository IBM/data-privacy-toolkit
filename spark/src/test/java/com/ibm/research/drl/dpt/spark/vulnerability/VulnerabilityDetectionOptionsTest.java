/*******************************************************************
 *                                                                 *
 * Copyright IBM Corp. 2019                                        *
 *                                                                 *
 *******************************************************************/
package com.ibm.research.drl.dpt.spark.vulnerability;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.HashSet;

import static org.hamcrest.CoreMatchers.*;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.hamcrest.core.IsInstanceOf.instanceOf;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNotNull;

public class VulnerabilityDetectionOptionsTest {
    private static final ObjectMapper mapper = new ObjectMapper();

    @Test
    public void completeForCSV() throws IOException {
        try (InputStream input = getClass().getResourceAsStream("/vulnerabilityConfiguration.json")) {
            VulnerabilityDetectionOptions configuration = mapper.readValue(input, VulnerabilityDetectionOptions.class);

            assertNotNull(configuration);
            assertThat(configuration.getK(), is(5));

            assertNotNull(configuration.getExcludedFields());
            assertFalse(configuration.getExcludedFields().isEmpty());
        }
    }

    @Test
    public void testSerialization() throws Exception {
        VulnerabilityDetectionOptions vulnerabilityDetectionOptionsWithExcludedFields = new VulnerabilityDetectionOptions(
                5,
                new HashSet<>(Arrays.asList("a", "b")),
                VulnerabilityDetectionStrategy.BruteForce,
                10,
                false
        );

        String vulnerabilityDetectionOptionsWithExcludedFieldsString = mapper.writeValueAsString(vulnerabilityDetectionOptionsWithExcludedFields);

        VulnerabilityDetectionOptions vulnerabilityDetectionOptionsWithExcludedFieldsRef = mapper.readValue(vulnerabilityDetectionOptionsWithExcludedFieldsString, VulnerabilityDetectionOptions.class);

        assertThat(vulnerabilityDetectionOptionsWithExcludedFieldsRef, is(not(nullValue())));
        assertThat(vulnerabilityDetectionOptionsWithExcludedFieldsRef, instanceOf(VulnerabilityDetectionOptions.class));

        assertThat(vulnerabilityDetectionOptionsWithExcludedFieldsRef.getK(), is(5));
        assertThat(vulnerabilityDetectionOptionsWithExcludedFieldsRef.getExcludedFields(), is(new HashSet<>(Arrays.asList("a", "b"))));
        assertThat(vulnerabilityDetectionOptionsWithExcludedFieldsRef.getStrategy(), is(VulnerabilityDetectionStrategy.BruteForce));
        assertThat(vulnerabilityDetectionOptionsWithExcludedFieldsRef.getMaxSize(), is(10));
        assertThat(vulnerabilityDetectionOptionsWithExcludedFieldsRef.isReport(), is(false));
    }}
