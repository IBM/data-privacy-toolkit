/*******************************************************************
 *                                                                 *
 * Copyright IBM Corp. 2022                                        *
 *                                                                 *
 *******************************************************************/
apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'jacoco'

sourceCompatibility = '11'
targetCompatibility = '11'

group = 'com.ibm.research.drl.dpt'
version = '6.0.0'

repositories {
    mavenCentral()
    mavenLocal()

    maven {
        url = uri('https://www.dcm4che.org/maven2')
    }
}

ext {
    junit_jupiter_version = '5.9.0'
    junit_platform_launcher_version = '1.9.0'

    mockito_version = '4.11.0'
    jdefault_version = '2.0.0'
    hamcrest_version = '2.2'

    jackson_version = '2.14.2'
    jackson_dataformat_version = '2.14.2'

    log4j2_version = '2.19.0'

    commons_codec_version = '1.13'
    commons_csv_version = '1.8'
    commons_io_version = '2.7'
    commons_lang_version = '3.10'
    commons_math_version = '3.6.1'
    commons_text_version = '1.8'
    commons_validator_version = '1.7'
    commons_cli_version = "1.4"
    pdfbox_version = '2.0.24'

    scala_version = '2.13'
    spark_version = '3.2.3'

    poi_version = "5.2.2"
}

dependencies {
    implementation "${group}:data-privacy-toolkit:${version}"

    implementation "com.fasterxml.jackson.core:jackson-annotations:${jackson_version}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_dataformat_version}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_dataformat_version}"
    implementation 'org.lz4:lz4-java:1.8.0'

    implementation "commons-cli:commons-cli:${commons_cli_version}"
    implementation "org.apache.commons:commons-csv:${commons_csv_version}"

    implementation "org.apache.spark:spark-core_${scala_version}:${spark_version}"
    implementation "org.apache.spark:spark-sql_${scala_version}:${spark_version}"

    testImplementation "org.apache.commons:commons-text:${commons_text_version}"
    testImplementation "org.apache.logging.log4j:log4j-core:${log4j2_version}"
    testImplementation "org.junit.jupiter:junit-jupiter:${junit_jupiter_version}"
    testImplementation "org.junit.jupiter:junit-jupiter-api:${junit_jupiter_version}"
    testImplementation "org.mockito:mockito-core:${mockito_version}"
    testImplementation "org.hamcrest:hamcrest:${hamcrest_version}"
    testImplementation "org.beer30:jdefault:${jdefault_version}"

    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junit_platform_launcher_version}"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:${junit_jupiter_version}"
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform()
    minHeapSize = "5g"
    maxHeapSize = "10g"

    //jvmArgs '--add-exports java.base/sun.nio.ch=ALL-UNNAMED'

    testLogging {
        events 'failed'
        exceptionFormat 'short'

        showCauses true
        showExceptions true
        showStackTraces true
        showStandardStreams false
    }
}

tasks.create(name: "testCoverage", type: JacocoReport, dependsOn: "test") {

    group = "Reporting"
    description = "Generate Jacoco coverage reports for the test build."

    reports {
        html.required = true
        xml.required = true
        csv.required = false
    }

    def excludes = [
            '**/*Test*.*',
            '**/actions/*.*',
    ]

    def javaClasses = fileTree(dir: "${buildDir}/classes/java/main", excludes: excludes)
    classDirectories.from = files([javaClasses])

    sourceDirectories.from = files([
            "$project.projectDir/src/main/java",
    ])

    executionData.from = files("${project.buildDir}/jacoco/test.exec")
}
